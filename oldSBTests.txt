    ////make second rule and test fine rule
    //node = new_rule('A', "F");
    //node->next = rules;
    //rules = node;
    //node = find_rule(rules, 'F');
    //if(node != NULL){
    //    printf("find_rule() test\n");
    //    printf("Var: %c\n", node->var);
    //    printf("Rule: %s\n", node->rule);
    //}
    //else{
    //    printf("no rule found");
    //}

    //startAngle = 0;
    ////deltaAngle = 5 * (2 * M_PI / 360.0);
    ////right point
    //q[0] = 30*cos(0);
    //q[1] = 30*sin(0);
    ////top point
    //p[0] = 30*cos(90*toRadians);
    //p[1] = 30*sin(90*toRadians);

    ////points rotated arround center
    //G_rgb(1,0,0) ;
    //G_fill_circle(0,0,2) ;
    //G_fill_circle(q[0], q[1], 2) ;
    //G_fill_circle(p[0], p[1], 2) ;
    //rotate_point(q, 45*toRadians);
    //G_fill_circle(q[0],q[0],2) ;

    ////rotate arroudn point
    ////next_point(lastPoint, nextPoint, startAngle, deltaAngle, forwardLen){
    //q[0] = 30*cos(0);
    //q[1] = 30*sin(0);
    //p[0] = 30*cos(90*toRadians);
    //p[1] = 30*sin(90*toRadians);
    //next_point(q, p, 0, 90*toRadians, 30);
    //G_fill_circle(p[0], p[1], 2) ;

void string_builder(struct Node* rules, int maxDepth){
    int index;
    int length = strlen(u);
    struct Node* node; 
    int shiftSize;
    char temp;
    int start;
    

    //one pass
    for(int i=0; i< maxDepth; i++){
        index= 0;
        while(index < length){
            node = find_rule(rules, u[index]);
            if(node != NULL){
                shiftSize = strlen(node->rule) + 1;

                //index is last letter
                if(index == length - 1){
                    u[index]='\0';
                    strcat(u, node->rule);
                }
                else{
                    temp = u[index+1];
                    length = strlen(u);
                    u[index] = '\0';
                    //why -1
                    shift(index+1, length, shiftSize);
                    
                    strcat(u, node->rule);
                    length = strlen(u);
                    u[length]= temp;
                }
                index = index + shiftSize;
            }
            // noe rule for char
            else{
                index++;
            }
            length = strlen(u);
        }
    }
}

//   // old rule strinb builder test test 
//     struct Node* nodeTest = new_rule('F', "-F+F-");
//     struct Node* rulesTest = nodeTest;
//     printf("old test\n");
//     printf("rule: %s\n", rulesTest->rule);
//     //test 1
//     u[0]='\0';
//     strcpy(u, "++F");
//     printf("axiom: %s\n", u);
//     string_builder(rulesTest, 1);
//     printf("\nresult 1: %s\n", u);
//
//     //test 2
//     u[0]='\0';
//     strcpy(u, "++F");
//     printf("axiom: %s\n", u);
//     string_builder(rulesTest, 2);
//     printf("\nresult 2:%s\n", u);

///    //new rule string builder tests
///    printf("\n\n new rule test\n");
///    //stringBuilder test 1
//       u[0] = '\0';
//       strcpy(u, "F");
///    printf("test 1\n");
///    printf("axiom: %s\n", u);
///    printf("rule: %s\n", rules->rule);
///    string_builder(rules, 1);
///    char str1[10] = "F+F--F+F";
///    printf("result:  %s\n", u);
///    printf("expected:%s\n", str1);
    //stringBuilder test 1
    //char str2[50] = "F+F--F+F+F+F--F+F--F+F--F+F+F+F--F+F";
    //stringBuilder test 2
    //char str3[200] = "F+F--F+F+F+F--F+F--F+F--F+F+F+F--F+F+F+F--F+F+F+F--F+F--F+F--F+F+F+F--F+F--F+F--F+F+F+F--F+F--F+F--F+F+F+F--F+F+F+F--F+F+F+F--F+F--F+F--F+F+F+F--F+F";
